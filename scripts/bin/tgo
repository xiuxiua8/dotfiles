#!/usr/bin/env python


import argparse
import datetime

import os
import pathlib
import re
import signal
import subprocess
import sys
import time
from multiprocessing import Pool, Value
from tqdm import tqdm


parser = argparse.ArgumentParser(description='Run DSE go tests in parallel')

parser.add_argument('-o', '--output',  dest='out', default='logs', help='Output path to use for logs')
parser.add_argument('-v', '--verbose', dest='verbose', action='count', default=0, help='Verbose mode')
parser.add_argument('-c', '--cont',    dest='continuous', action='store_true', default=False, help='Enable continuous mode (batched by default)')
parser.add_argument('-r', '--race',    dest='race', action='store_true', default=False, help='Check for race conditions')
parser.add_argument('-a', '--archive', dest='archive', action='store_true', default=False, help='Enable archive mode, where all logs are saved')
parser.add_argument('-l', '--loop',    dest='loop', action='store_true', default=False, help='Loop the testing forever')
parser.add_argument('-g', '--growth',  dest='growth', type=int, default=1, help='Growth ratio of iterations/epoch')
parser.add_argument('-P', '--workers', dest='num_workers', type=int, default=1, help='Number of parallel tests')
parser.add_argument('-n', '--iter',    dest='iter', default=100, type=int, help='Number of iterations to run')
parser.add_argument(dest='tests', nargs='*', default=None, help="Test(s) to run")


class color:
    MAGENTA     = '\033[95m'
    CYAN        = '\033[96m'
    DARKCYAN    = '\033[36m'
    BLUE        = '\033[94m'
    GREEN       = '\033[92m'
    GRASS       = '\033[32m'
    ORANGE      = '\033[93m'
    YELLOW      = '\033[33m'
    RED         = '\033[91m'
    FADERED     = '\033[31m'
    BOLD        = '\033[1m'
    UNDERLINE   = '\033[4m'
    END         = '\033[0m'


verbose = 0
util_file = None
VERBOSE_FILE = 'util.go'
exit = Value('i', 0)


def set_level(level):
    vfile = re.sub(r"Debug = \d", f"Debug = {level}", util_file)
    with open(VERBOSE_FILE, 'w') as f:
        print(vfile, file=f)


def signal_handler(signal, frame):
    with exit.get_lock():
        if exit.value == 0:
            exit.value = 1
            print(color.RED+'Killed In Action'+color.END)
    sys.exit(1)


def run_test(test, j, testpath, race=False):
    with open(testpath / f"{j}.txt", 'w') as f:
        test_cmd = ['go', 'test', f'-run={test}']
        if race:
            test_cmd.append('-race')

        p = subprocess.Popen(test_cmd, stdout=f, stderr=f)
        return j, p


def p_run_test(args):
    j, p = run_test(*args)
    p.wait()
    return j, p.returncode


def post_run_test(test, j, rc, failed, testpath, archive=False):
    if not archive and rc == 0:
        os.remove(testpath / f"{j}.txt")

    if rc != 0:
        failed.append(j)
        print(color.ORANGE + f"Test {test} failed at iteration {j}" + color.END)


if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)
    args = parser.parse_args()
    max_processes = args.num_workers
    N = args.iter

    verbose = args.verbose
    # if verbose > 0:
    print(color.YELLOW+f'Verbose Level: {verbose}'+color.END)
    with open(VERBOSE_FILE, 'r') as f:
        util_file = f.read()
    set_level(verbose)

    while True:
        start = time.time()
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        out = pathlib.Path(args.out) / timestamp
        print(color.MAGENTA + f"Saving logs to {out}" + color.END)

        for test in args.tests:

            failed = []
            print(f"Running test {color.BOLD} {test} for {N} iterations with {max_processes} workers" + color.END)

            testpath = out / test
            testpath.mkdir(parents=True, exist_ok=True)

            failed = []

            if not args.continuous:
                with tqdm(total=N) as pbar:
                    assigned = 0
                    while assigned < N:

                        to_assign = range(assigned, min(assigned+max_processes, N))
                        processes = [run_test(test, j, testpath, args.race) for j in to_assign]
                        assigned += len(processes)

                        for j, p in processes:
                            p.wait()
                            post_run_test(test, j, p.returncode, failed, testpath, args.archive)

                        pbar.update(len(processes))

            else:
                with Pool(processes=args.num_workers) as pool:
                    params = [(test, i, testpath, args.race) for i in range(N)]
                    for j, rc in tqdm(pool.imap_unordered(p_run_test, params), total=N):
                        post_run_test(test, j, rc, failed, testpath, args.archive)

            fail = len(failed)
            if fail == 0:
                print(color.GREEN + f"Test {test} PASSED consistently!" + color.END)
                if not args.archive:
                    os.rmdir(testpath)
            else:
                print(color.RED + f"Test {test} FAILED {fail}/{N} times" + color.END)
                with open(testpath / "failed.txt", 'w') as f:
                    f.writelines([f"{i}.txt\n" for i in sorted(failed)])

        m = len(args.tests)
        totaltime = time.time() - start
        print(color.BOLD + f"Completed {m} tests in {totaltime:.2f} seconds" + color.END)

        if not args.loop:
            break
        if args.growth > 1:
            N *= args.growth
            print(color.CYAN + color.BOLD + f"Increasing iterations to {N}" + color.END)
        print()
