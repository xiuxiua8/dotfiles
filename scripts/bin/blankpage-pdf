#!/usr/bin/env python

"""Merge pdfs in a folder

Usage:
  merge_pdfs.py [options] FILE...
  merge_pdfs.py [options] -f FOLDER
  merge_pdfs.py (-h | --help)

Arguments:
  FILE        PDF files to merge

Options:
  -f FOLDER        Join all PDF files inside a folder
  -o OUTPUT        Output file to save to. Defaults to merged.pdf
  -p PAGES         Adds white pages for printing so it is <pages> pages per printed page
  -d PAGES         Adds white pages for printing double sided <pages> pages per printed page
  -v, --verbose    Display information about what is happening
  -h, --help       Show this screen.

"""

import pathlib
import sys

try:
    from docopt import docopt
except:
    print("ERROR: Missing docopt try running \n\tsudo pip install docopt")
    sys.exit(1)

try:
    from PyPDF2 import PdfFileWriter, PdfFileReader
except:
    print("ERROR: Missing PyPDF2 try running \n\tsudo pip install PyPDF2")
    sys.exit(1)

if __name__ == '__main__':
    arguments = docopt(__doc__)
    output_file = arguments['-o'] if arguments['-o'] else 'merged.pdf'
    alignment = int(arguments['-p']) if arguments['-p'] else 1
    alignment = int(arguments['-d'])*2 if arguments['-d'] else alignment
    if arguments['-f']:
        folder = pathlib.Path(arguments['-f'])
        if folder.exists():
            files = sorted(folder.glob("*.pdf"))
        else:
            print(f"ERROR: Folder {folder.absolute()} does not exist!")
            sys.exit(1)
    else:
        files = arguments['FILE']

    output = PdfFileWriter()
    for filename in files:
        input = PdfFileReader(open(filename, 'rb'))
        N = input.getNumPages()
        whitePages = (alignment - N % alignment) % alignment
        print("Processing %s : %d Pages and %d Whitepages" % (filename, N, whitePages)) if arguments['--verbose'] else None
        for p in [input.getPage(i) for i in range(N)]:
            output.addPage(p)
        for _ in range(whitePages):
            output.addBlankPage()
    print("Saving output in %s ..." % output_file) if arguments['--verbose'] else None
    outputStream = open(output_file, "wb")
    output.write(outputStream)
    outputStream.close()
    print("DONE!\n") if arguments['--verbose'] else None
